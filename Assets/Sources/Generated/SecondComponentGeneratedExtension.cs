//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public SecondComponent second { get { return (SecondComponent)GetComponent(CoreComponentIds.Second); } }
        public bool hasSecond { get { return HasComponent(CoreComponentIds.Second); } }

        public Entity AddSecond(float newValue) {
            var component = CreateComponent<SecondComponent>(CoreComponentIds.Second);
            component.value = newValue;
            return AddComponent(CoreComponentIds.Second, component);
        }

        public Entity ReplaceSecond(float newValue) {
            var component = CreateComponent<SecondComponent>(CoreComponentIds.Second);
            component.value = newValue;
            ReplaceComponent(CoreComponentIds.Second, component);
            return this;
        }

        public Entity RemoveSecond() {
            return RemoveComponent(CoreComponentIds.Second);
        }
    }

    public partial class Pool {

        public Entity secondEntity { get { return GetGroup(CoreMatcher.Second).GetSingleEntity(); } }
        public SecondComponent second { get { return secondEntity.second; } }
        public bool hasSecond { get { return secondEntity != null; } }

        public Entity SetSecond(float newValue) {
            if(hasSecond) {
                throw new EntitasException("Could not set second!\n" + this + " already has an entity with SecondComponent!",
                    "You should check if the pool already has a secondEntity before setting it or use pool.ReplaceSecond().");
            }
            var entity = CreateEntity();
            entity.AddSecond(newValue);
            return entity;
        }

        public Entity ReplaceSecond(float newValue) {
            var entity = secondEntity;
            if(entity == null) {
                entity = SetSecond(newValue);
            } else {
                entity.ReplaceSecond(newValue);
            }

            return entity;
        }

        public void RemoveSecond() {
            DestroyEntity(secondEntity);
        }
    }
}

    public partial class CoreMatcher {

        static IMatcher _matcherSecond;

        public static IMatcher Second {
            get {
                if(_matcherSecond == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.Second);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherSecond = matcher;
                }

                return _matcherSecond;
            }
        }
    }
